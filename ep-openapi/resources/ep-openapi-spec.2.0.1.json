{
  "openapi": "3.0.1",
  "info": {
    "title": "Event Portal Open API",
    "description": "REST API Concepts\n\nSolace PubSub+ Event Portal provides REST APIs that you can use to manage your data in PubSub+ Cloud. \nThe REST APIs allow you to model your event-driven architectures from your own client applications.\n\nThe following document describes the public REST APIs available for use in Event Portal 2.0. Objects created in this \nversion will not be available in Event Portal 1.0. APIs that display (Beta) in their summary are provided as-is and \nare subject to change or removal. They may not be of the quality expected for generally available APIs and have no \nguaranteed forward compatibility with the generally available version of the API.\n\n",
    "version": "2.0.1-build.003"
  },
  "servers": [
    {
      "url": "https://api.solace.cloud",
      "description": "Solace PubSub+ Cloud"
    }
  ],
  "security": [
    {
      "APIToken": []
    }
  ],
  "tags": [
    {
      "name": "Application Domains"
    },
    {
      "name": "Applications"
    },
    {
      "name": "Consumers"
    },
    {
      "name": "Custom Attribute Definitions"
    },
    {
      "name": "Enums"
    },
    {
      "name": "Environments"
    },
    {
      "name": "Event API Products"
    },
    {
      "name": "Event APIs"
    },
    {
      "name": "Event Meshes"
    },
    {
      "name": "Events"
    },
    {
      "name": "Schemas"
    },
    {
      "name": "States"
    },
    {
      "name": "Topic Domains"
    }
  ],
  "paths": {
    "/api/v2/architecture/enums": {
      "get": {
        "tags": ["Enums"],
        "summary": "Lists enums",
        "description": "Use this API to list enums based on certain criteria.",
        "operationId": "getEnums",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of enums to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the enums.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "The application domain ID of the enums.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainIds",
            "in": "query",
            "description": "Match only enums in the given application domain ids.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "names",
            "in": "query",
            "description": "The names of the enums.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only with shared or unshared enums.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort based on the provided parameters.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of enums and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Enums"],
        "summary": "Creates an enum object",
        "description": "description",
        "operationId": "createEnum",
        "requestBody": {
          "description": "Enum object description.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an enum. The newly saved enum object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/events": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets the event objects",
        "description": "Use this API to retrieve a list of events that match the given parameters.",
        "operationId": "getEvents",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of events to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the event to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only with shared or unshared events.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only events in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainIds",
            "in": "query",
            "description": "Match only events in the given application domain ids.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only events with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of applications and the accompanying metadata.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/EventsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Creates an event object",
        "description": "Events are the primary building block of an event-driven architecture. Applications publish and subscribe to events and events reference schemas.  In the Event Portal, an event is a type of event as opposed to a specific event instance.",
        "operationId": "createEvent",
        "requestBody": {
          "description": "The event requires a name and an application domain ID.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event. The newly saved event object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/states": {
      "get": {
        "tags": ["States"],
        "summary": "Gets the State objects",
        "description": "Use this API to retrieve a list of Lifeycle States that match the given parameters.",
        "operationId": "getStates",
        "responses": {
          "200": {
            "description": "Retrieve a list of lifecycle states and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/StatesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemas": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Gets the schema objects",
        "description": "Use this API to retrieve a list of schemas that match the given parameters.",
        "operationId": "getSchemas",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of schemas to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the schema to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only with shared or unshared schemas.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only schemas in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainIds",
            "in": "query",
            "description": "Match only schemas in the given application domain ids.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only schemas with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of schemas and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemasResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Schemas"],
        "summary": "Creates a schema object",
        "description": "To model your event-driven architecture, schemas are a fundamental building block for modelling the payloads of the events flowing through your system. Use this API to create schemas that can later be referenced by events.",
        "operationId": "createSchema",
        "requestBody": {
          "description": "The schema requires a name, an application domain, a schema type and a content type.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/SchemaObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a schema. The newly saved schema object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApis": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves a list of event APIs",
        "description": "Use this API to retrieve a list of event APIs that match the given parameters.",
        "operationId": "getEventApis",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event APIs to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the event API to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only event APIs with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only event APIs in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainIds",
            "in": "query",
            "description": "Match only event APIs in the given application domains.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "eventApiVersionIds",
            "in": "query",
            "description": "Match only event APIs in the given event API version ids.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "availableWithinApplicationDomainIds",
            "in": "query",
            "description": "Additionally match any shared event APIs in any application domain.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only with shared or unshared event APIs.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "brokerType",
            "in": "query",
            "description": "Match only event APIs with the given broker type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of event APIs and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApisResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event APIs"],
        "summary": "Creates an event API",
        "description": "Use this API to create an event API.",
        "operationId": "createEventApi",
        "requestBody": {
          "description": "The event API",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApi"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event API. The newly saved event API is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/consumers": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Gets the consumer objects",
        "description": "Use this API to retrieve a list of consumers that match the given parameters.",
        "operationId": "getConsumers",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of consumers to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "applicationVersionIds",
            "in": "query",
            "description": "Match only consumers with the given application version IDs, separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only consumers with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of consumers and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Consumers"],
        "summary": "Creates a consumer object",
        "description": "Use this API to create a consumer. ",
        "operationId": "createConsumer",
        "requestBody": {
          "description": "The consumer object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consumer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a consumer. Returns the newly saved consumer object in the response body.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enums/{id}": {
      "get": {
        "tags": ["Enums"],
        "summary": "Retrieves an enum object",
        "description": "Use this API to retrieve a single enum by its ID.",
        "operationId": "getEnum",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The enum object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Enums"],
        "summary": "Deletes an enum",
        "description": "Use this API to delete an enum. The enum must not have any versions or else it cannot be deleted.",
        "operationId": "deleteEnum",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned if the delete was successful."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the enum did not exist."
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Enums"],
        "summary": "Updates an enum object",
        "description": "description",
        "operationId": "updateEnum",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enum updates.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnum"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated an enum. The newly saved enum object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventMeshes": {
      "get": {
        "tags": ["Event Meshes"],
        "summary": "Gets the event mesh objects",
        "description": "Use this API to retrieve a list of event meshes that match the given parameters.",
        "operationId": "getEventMeshes",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event meshes to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the event mesh to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "environmentId",
            "in": "query",
            "description": "Match only event meshes in the given environment",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of event meshes and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventMeshesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event Meshes"],
        "summary": "Creates an event mesh object",
        "description": "Creates an event mesh object.",
        "operationId": "createEventMesh",
        "requestBody": {
          "description": "Event mesh.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventMesh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event mesh. The newly saved event object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventMeshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/events/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves an event object",
        "description": "Use this API to retrieve a single event by its ID.",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Deletes an event object",
        "description": "Use this API to delete an event.",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Events"],
        "summary": "Updates an event object",
        "description": "Use this API to update an event. You only need to specify the fields that need to be updated.",
        "operationId": "updateEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/topicDomains": {
      "get": {
        "tags": ["Topic Domains"],
        "summary": "Gets the topic domain objects",
        "description": "Use this API to retrieve a list of topic domains that match the given parameters.",
        "operationId": "getTopicDomains",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of topic domains to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only topic domains with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "brokerType",
            "in": "query",
            "description": "Match only topic domains with the given brokerType.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainIds",
            "in": "query",
            "description": "Match only topic domains with the given application domain ids separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of topic domains and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicDomainsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Topic Domains"],
        "summary": "Creates a topic domain object",
        "description": "Topic Domains govern the format of topic addresses within an application domain",
        "operationId": "createTopicDomain",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TopicDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a topic domain. Returns the newly saved topic domain object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enumVersions": {
      "get": {
        "tags": ["Enums"],
        "summary": "Gets the enumeration version objects",
        "description": "Use this API to retrieve a list of enumeration versions that match the given parameters.",
        "operationId": "getEnumVersions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of enumerations to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only enumeration versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of enumeration versions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Enums"],
        "summary": "Creates an enum version object",
        "description": "description",
        "operationId": "createEnumVersion",
        "requestBody": {
          "description": "Enum object description with its values.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnumVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an enum version and its values. The newly saved enum version object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applications": {
      "get": {
        "tags": ["Applications"],
        "summary": "Gets the application objects",
        "description": "Use this API to retrieve a list of applications that match the given parameters.",
        "operationId": "getApplications",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of applications to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the application to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only applications in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only applications with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          },
          {
            "name": "applicationType",
            "in": "query",
            "description": "Match only applications with the given applicationType.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of applications and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applications"],
        "summary": "Creates an application object",
        "description": "To model your event-driven architecture, applications are a fundamental building block for modelling the producers and consumers of events. Use this API to create applications and model the events they produce and consume.",
        "operationId": "createApplication",
        "requestBody": {
          "description": "Applications have a name and live within an application domain. Events can be added to the application as produced or consumed.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an application. Returns the newly saved application object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemas/{id}": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Retrieves a schema object",
        "description": "Use this API to retrieve a single schema by its ID.",
        "operationId": "getSchema",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Schemas"],
        "summary": "Deletes a schema object",
        "description": "Use this API to delete a schema. The schema must not be in use by any events else it cannot be deleted.",
        "operationId": "deleteSchema",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Schemas"],
        "summary": "Updates a schema object",
        "description": "Update a schema",
        "operationId": "updateSchema",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The schema requires a name, an application domain, a schema type and a content type.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/SchemaObject"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated a schema. The newly saved schema object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/environments": {
      "get": {
        "tags": ["Environments"],
        "summary": "Gets the environment objects",
        "description": "Use this API to list all environments.",
        "operationId": "getEnvironments",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of events to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "like",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of environments and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventVersions": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets event version objects",
        "description": "Use this API to retrieve a list of event versions that match the given parameters.",
        "operationId": "getEventVersions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only event versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of event versions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Events"],
        "summary": "Creates an event version object",
        "description": "Creates an event version object",
        "operationId": "createEventVersion",
        "requestBody": {
          "description": "App version request body description",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event version. Returns the newly saved event version object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemaVersions": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Gets the schema version objects for a schema",
        "description": "Use this API to retrieve a list of schema versions that match the given parameters.",
        "operationId": "getSchemaVersions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of schemas to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only schema versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of schema versions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Schemas"],
        "summary": "Creates a schema version object",
        "description": "Creates a schema version object",
        "operationId": "createSchemaVersion",
        "requestBody": {
          "description": "schema version details",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/SchemaVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a schema version. The newly saved schema version object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApis/{id}": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves an event API",
        "description": "Use this API to retrieve a single event API by its ID.",
        "operationId": "getEventApi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event API.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event APIs"],
        "summary": "Deletes an event API",
        "description": "Use this API to delete an event API.",
        "operationId": "deleteEventApi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event APIs"],
        "summary": "Updates an event API",
        "description": "Use this API to update an event API. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventApi",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApi"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event API.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/consumers/{id}": {
      "get": {
        "tags": ["Consumers"],
        "summary": "Retrieves a consumer object",
        "description": "Use this API to retrieve a single consumer by its ID.",
        "operationId": "getConsumer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the consumer object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The consumer object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Consumers"],
        "summary": "Deletes a consumer object",
        "description": "Use this API to delete a consumer.",
        "operationId": "deleteConsumer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the consumer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Consumers"],
        "summary": "Update a consumer object",
        "description": "Use this API to update a consumer. ",
        "operationId": "updateConsumer",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the consumer",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The consumer object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Consumer"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated a consumer. Returns the newly saved consumer object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ConsumerResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiVersions": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves a list of event API versions",
        "description": "Use this API to retrieve a list of event API versions that match the given parameters.",
        "operationId": "getEventApiVersions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results to return in one page of results.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get results from based on the page size.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match event API versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "A list of additional entities to include in the response.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "parent"
          },
          {
            "name": "stateId",
            "in": "query",
            "description": "Match event API versions with the given state ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of event API versions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event APIs"],
        "summary": "Creates an event API version",
        "description": "Use this API to create an event API version.",
        "operationId": "createEventApiVersion",
        "requestBody": {
          "description": "Event API version",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event API version. Returns the newly saved event API version in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProducts": {
      "get": {
        "tags": ["Event API Products"],
        "summary": "Retrieves a list of event API products",
        "description": "Use this API to retrieve a list of event API products that match the given parameters.",
        "operationId": "getEventApiProducts",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event API products to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "brokerType",
            "in": "query",
            "description": "Match only event API products with the given broken type.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name of the event API product to match on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only event API products with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "applicationDomainId",
            "in": "query",
            "description": "Match only event API products in the given application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "applicationDomainIds",
            "in": "query",
            "description": "Match only event API products in the given application domains.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "shared",
            "in": "query",
            "description": "Match only with shared or unshared event API products.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "The list of event API products and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event API Products"],
        "summary": "Creates an event API product",
        "description": "Use this API to create an event API product.",
        "operationId": "createEventApiProduct",
        "requestBody": {
          "description": "The event API product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event API product. The newly saved event API product is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventMeshes/{id}": {
      "get": {
        "tags": ["Event Meshes"],
        "summary": "Retrieves an event mesh object",
        "description": "Retrieves a single event mesh by its ID.",
        "operationId": "getEventMesh",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event mesh object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event mesh object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventMeshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event Meshes"],
        "summary": "Deletes an event mesh object",
        "description": "Use this API to delete an event mesh.",
        "operationId": "deleteEventMesh",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event mesh object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event Meshes"],
        "summary": "Updates an event mesh object",
        "description": "Use this API to update an event mesh. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventMesh",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event mesh object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event mesh object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventMesh"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event mesh object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventMeshResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices": {
      "get": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Retrieves a list of messaging services",
        "description": "Use this API to retrieve a list of messaging services that match the given parameters.",
        "operationId": "getMessagingServices",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging services to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the messaging services.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "messagingServiceType",
            "in": "query",
            "description": "Match only messaging services of the given type",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "runtimeAgentId",
            "in": "query",
            "description": "Match only messaging services in the given runtimeAgentId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventMeshId",
            "in": "query",
            "description": "Match only messaging services in the given eventMeshId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventManagementAgentId",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging services and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServicesResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Creates a messaging service object",
        "description": "Use this API to create a messaging service object.",
        "operationId": "createMessagingService",
        "requestBody": {
          "description": "The messaging service object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a messaging service. The newly saved object is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enumVersions/{id}": {
      "delete": {
        "tags": ["Enums"],
        "summary": "Deletes an enum version",
        "description": "Use this API to delete an enum version. The version must not be in use by any events else it cannot be deleted. This also deletes the version's values.",
        "operationId": "deleteEnumVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned if the delete was successful."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the enum version did not exist."
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Enums"],
        "summary": "Updates an enum version object",
        "description": "Use this API to update an enum version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEnumVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The enum version object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnumVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applications/{id}": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves an application object",
        "description": "Use this API to retrieve a single application by its ID.",
        "operationId": "getApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Applications"],
        "summary": "Deletes an application object",
        "description": "Use this API to delete an application.",
        "operationId": "deleteApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Applications"],
        "summary": "Updates an application object",
        "description": "Use this API to update an application. You only need to specify the fields that need to be updated.",
        "operationId": "updateApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/Application"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/topicDomains/{id}": {
      "get": {
        "tags": ["Topic Domains"],
        "summary": "Retrieves a topic domain object",
        "description": "Use this API to retrieve a single topic domain by its ID.",
        "operationId": "getTopicDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The topic domain object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Topic Domains"],
        "summary": "Deletes a topic domain object",
        "description": "Use this API to delete a topic domain.",
        "operationId": "deleteTopicDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the topic domain",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/TopicDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/environments/{id}": {
      "get": {
        "tags": ["Environments"],
        "summary": "Retrieves an environment object",
        "description": "Use this API to retrieve a single environment by its ID.",
        "operationId": "getEnvironment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the environment object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The environment object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EnvironmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationDomains": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "Gets the application domain objects",
        "description": "Use this API to retrieve a list of application domains that match the given parameters.",
        "operationId": "getApplicationDomains",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of application domains to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "name",
            "in": "query",
            "description": "Name to be used to match the application domain.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only application domains with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Specify extra data to be included, options are: stats",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of application domains and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Application Domains"],
        "summary": "Creates an application domain object",
        "description": "To help keep your event-driven architecture organized, use application domains to create namespaces for your applications, events and schemas.",
        "operationId": "createApplicationDomain",
        "requestBody": {
          "description": "Application domains have a name and topic domain.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created. The newly saved application domain object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventVersions/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves an event version object",
        "description": "Use this API to retrieve a single event version by its ID.",
        "operationId": "getEventVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Deletes an event version object",
        "description": "Use this API to delete an event version.",
        "operationId": "deleteEventVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Events"],
        "summary": "Updates an event version object",
        "description": "Use this API to update an event version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event version object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationVersions": {
      "get": {
        "tags": ["Applications"],
        "summary": "Gets the application version objects",
        "description": "Use this API to retrieve a list of application versions that match the given parameters.",
        "operationId": "getApplicationVersions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of application versions to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only application versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of application versions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Applications"],
        "summary": "Creates an application version object",
        "description": "Creates an application version object",
        "operationId": "createApplicationVersion",
        "requestBody": {
          "description": "App version request body description",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an application version. Returns the newly saved application version object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemaVersions/{id}": {
      "delete": {
        "tags": ["Schemas"],
        "summary": "Deletes a schema version object",
        "description": "Use this API to delete a schema version.",
        "operationId": "deleteSchemaVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Schemas"],
        "summary": "Updates a schema version object",
        "description": "Use this API to update a schema version.",
        "operationId": "updateSchemaVersion",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/SchemaVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schema version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Retrieves a list of EMAs",
        "description": "Use this API to retrieve a list of EMAs that match the given parameters.",
        "operationId": "getEventManagementAgents",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of EMAs to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the EMAs.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "Match only EMAs created by this user",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventManagementAgentRegionId",
            "in": "query",
            "description": "Match only EMAs in the given EMA-Region",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of EMAs and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Creates an EMA object",
        "description": "Use this API to create an EMA object.",
        "operationId": "createEventManagementAgent",
        "requestBody": {
          "description": "The EMA object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventManagementAgent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an EMA. The newly saved object is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProducts/{id}": {
      "get": {
        "tags": ["Event API Products"],
        "summary": "Retrieves an event API product",
        "description": "Use this API to retrieve a single event API product by its ID.",
        "operationId": "getEventApiProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event API product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event API Products"],
        "summary": "Deletes an event API product",
        "description": "Use this API to delete an event API product.",
        "operationId": "deleteEventApiProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event API Products"],
        "summary": "Updates an event API product",
        "description": "Use this API to update an event API product. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventApiProduct",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API product",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProduct"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event API product.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans": {
      "get": {
        "tags": ["Messaging Service Scans"],
        "summary": "(Beta) Retrieves a list of messaging service scans",
        "description": "Use this API to retrieve a list of messaging service scans that match the given parameters.",
        "operationId": "getMessagingServiceScans",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging service scans to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the messaging service scans.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "messagingServiceId",
            "in": "query",
            "description": "Match only messaging service scans in the given messagingService",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventMeshId",
            "in": "query",
            "description": "Match only messaging service scans in the given eventMeshId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging service scans and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScansResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices/{id}": {
      "get": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Retrieves a messaging service object",
        "description": "Use this API to retrieve a single messaging service by its ID.",
        "operationId": "getMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging service object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Deletes a messaging service object",
        "description": "Use this API to delete a messaging service.",
        "operationId": "deleteMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Updates a messaging service object",
        "description": "Use this API to update a messaging service. You only need to specify the fields that need to be updated. However, if you want to update anything under subObjects (i.e. anything inside messagingServiceConnections object), you need to provide the original messagingServiceConnections with the updated fields instead of just providing the changed fields.",
        "operationId": "updateMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The messaging service object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated messaging service object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProductVersions": {
      "get": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Retrieves a list of event API product versions",
        "description": "Use this API to retrieve a list of event API product versions that match the given parameters.",
        "operationId": "getEventApiProductVersions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of results to return in one page of results.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get results from based on the page size.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match event API product versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "A list of additional entities to include in the response.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "parent"
          },
          {
            "name": "stateId",
            "in": "query",
            "description": "Match event API product versions with the given state ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "messagingServiceId",
            "in": "query",
            "description": "Match event API product versions with the given messagingServiceId.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of event API product versions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Creates an event API product version",
        "description": "Use this API to create an event API product version.",
        "operationId": "createEventApiProductVersion",
        "requestBody": {
          "description": "Event API product version",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProductVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event API product version. Returns the newly saved event API product version in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enums/{enumId}/versions": {
      "get": {
        "tags": ["Enums"],
        "summary": "Lists enums",
        "description": "Use this API to list enum versions based on certain criteria.",
        "operationId": "getEnumVersionsForEnum",
        "parameters": [
          {
            "name": "enumId",
            "in": "path",
            "description": "The ID of the enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of enum versions to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The ids of the enum versions.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "versions",
            "in": "query",
            "description": "The versions of the enum version.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "The display name of the enum versions.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of enums and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Enums"],
        "summary": "Creates an enum version object",
        "description": "description",
        "operationId": "createEnumVersionForEnum",
        "parameters": [
          {
            "name": "enumId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Enum object description with its values.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnumVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an enum version and its values. The newly saved enum version object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/enumVersions/{id}/state": {
      "patch": {
        "tags": ["Enums"],
        "summary": "Updates the state of an enum version object",
        "description": "Use this API to update the state of an enum version. You only need to specify the target stateId field.",
        "operationId": "updateEnumVersionState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The state object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the enum version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/StateChangeRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationDomains/{id}": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "Retrieves an application domain object",
        "description": "Use this API to retrieve a single application domain by its ID.",
        "operationId": "getApplicationDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Specify extra data to be included, options are: stats",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application domain object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Application Domains"],
        "summary": "Deletes an application domain object",
        "description": "Use this API to delete an application domain. This action also deletes all applications, events, and schemas in the application domain. You cannot undo this operation.",
        "operationId": "deleteApplicationDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Application Domains"],
        "summary": "Updates an application domain object",
        "description": "Use this API to update an application domain. You only need to specify the fields that need to be updated.",
        "operationId": "updateApplicationDomain",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application domain object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application domain object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDomain"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application domain object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationRegistrations": {},
    "/api/v2/architecture/eventVersions/{id}/state": {
      "patch": {
        "tags": ["Events"],
        "summary": "Updates the state of an event version object",
        "description": "Use this API to update the state of event version. You only need to specify the target stateId field",
        "operationId": "updateEventVersionState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The state object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the event version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/StateChangeRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enumVersions/{versionId}": {
      "get": {
        "tags": ["Enums"],
        "summary": "Retrieves an enumeration version object",
        "description": "Use this API to retrieve a single enumeration version by its ID.",
        "operationId": "getEnumVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the enumeration version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The enumeration version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/events/{eventId}/versions": {
      "get": {
        "tags": ["Events"],
        "summary": "Gets the event version objects for an event",
        "description": "Use this API to retrieve a list of event versions that match the given parameters.",
        "operationId": "getEventVersionsForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the parent event.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Match event versions with the given display name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match event versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Match event version objects with the given version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of event versions.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Events"],
        "summary": "Creates an event version object",
        "description": "Creates an event version object",
        "operationId": "createEventVersionForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the parent event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "App version request body description",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event version. Returns the newly saved event version object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/applicationDomains/import": {
      "post": {
        "tags": ["Application Domains"],
        "summary": "(Beta) Import application domains and their entities",
        "description": "Use this API to import application domains and their nested entities. Please note that this endpoint is in beta and could be subject to change in the future",
        "operationId": "importApplicationDomains",
        "requestBody": {
          "description": "Application domain import file",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationDomainImportDTO"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "Successfully registered import job with location identified in the response header"
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemaVersions/{id}/state": {
      "patch": {
        "tags": ["Schemas"],
        "summary": "Updates the state of a schema version object",
        "description": "Use this API to update the state of a schema version.",
        "operationId": "updateSchemaVersionState",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The state change object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the schema version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/StateChangeRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/customAttributeDefinitions": {
      "get": {
        "tags": ["Custom Attribute Definitions"],
        "summary": "Gets the custom attribute definition objects",
        "description": "Use this API to retrieve a list of custom attributes that match the given parameters.",
        "operationId": "getCustomAttributeDefinitions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of custom attribute definitions to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "associatedEntityTypes",
            "in": "query",
            "description": "Match only custom attribute definitions with the given associated entity type names separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of custom attribute definitions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeDefinitionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Custom Attribute Definitions"],
        "summary": "Creates a custom attribute definition object",
        "description": "Use this API to create a custom attribute definition.",
        "operationId": "createCustomAttributeDefinition",
        "requestBody": {
          "description": "The custom attribute object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/CustomAttributeDefinition"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a custom attribute definition. Returns the newly saved custom attribute definition object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents/{id}": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Retrieves an EMA object",
        "description": "Use this API to retrieve a single EMA by its ID.",
        "operationId": "getEventManagementAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Specify extra data to be included, options are: referencedByMessagingServiceIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The EMA object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Deletes an EMA object",
        "description": "Use this API to delete an EMA.",
        "operationId": "deleteEventManagementAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Updates an EMA object",
        "description": "Use this API to update an EMA. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventManagementAgent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The EMA object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventManagementAgent"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated EMA object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemaVersions/{versionId}": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Retrieves a schema version object",
        "description": "Use this API to retrieve a single schema version by its ID.",
        "operationId": "getSchemaVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the schema version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans/{id}": {
      "get": {
        "tags": ["Messaging Service Scans"],
        "summary": "(Beta) Retrieves a messaging service scan object",
        "description": "Use this API to retrieve a single messaging service scan by its ID.",
        "operationId": "getMessagingServiceScan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service scan object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging service scan object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Messaging Service Scans"],
        "summary": "(Beta) Deletes a messaging service scan object",
        "description": "Use this API to delete a messaging service scan.",
        "operationId": "deleteMessagingServiceScan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service scan object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemas/{schemaId}/versions": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Gets the schema version objects for a schema",
        "description": "Use this API to retrieve a list of schema versions that match the given parameters.",
        "operationId": "getSchemaVersionsForSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of schemas to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "versions",
            "in": "query",
            "description": "Match only with schema versions.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Match only schema versions with the given display name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match only schema versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of schema versions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Schemas"],
        "summary": "Creates a schema version object",
        "description": "Creates a schema version object",
        "operationId": "createSchemaVersionForSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The ID of the parent schema",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "schema version details",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/SchemaVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created a schema version. The newly saved schema version object is returned in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventManagementAgentRegions": {
      "get": {
        "tags": ["Event Management Agent Regions"],
        "summary": "(Beta) Retrieves a list of event management agent regions.",
        "description": "Use this API to retrieve a list of event management agent regions.",
        "operationId": "getEventManagementAgentRegions",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of event management agent regions to get per page.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of event management agent regions and the accompanying metadata.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventManagementAgentRegionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProductRegistrations": {},
    "/api/v2/architecture/eventApiVersions/{versionId}": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves an event API version",
        "description": "Use this API to retrieve a single event API version by its ID.",
        "operationId": "getEventApiVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "A list of additional entities to include in the response.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "parent"
          }
        ],
        "responses": {
          "200": {
            "description": "The event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event APIs"],
        "summary": "Deletes an event API version",
        "description": "Use this API to delete an event API version by event API version ID.",
        "operationId": "deleteEventApiVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event APIs"],
        "summary": "Updates an event API by event API version ID",
        "description": "Use this API to update an event API version by event API version ID.You only need to specify the fields that need to be updated.",
        "operationId": "updateEventApiVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enums/{enumId}/versions/{id}": {
      "get": {
        "tags": ["Enums"],
        "summary": "Retrieves an enum version object",
        "description": "Use this API to retrieve a single enum version by its ID.",
        "operationId": "getEnumVersionForEnum",
        "parameters": [
          {
            "name": "enumId",
            "in": "path",
            "description": "The ID of the enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The enum version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Enums"],
        "summary": "Deletes an enum version",
        "description": "Use this API to delete an enum version. The version must not be in use by any events else it cannot be deleted. This also deletes the version's values.",
        "operationId": "deleteEnumVersionForEnum",
        "parameters": [
          {
            "name": "enumId",
            "in": "path",
            "description": "The ID of the enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned if the delete was successful."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "If the enum version did not exist."
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Enums"],
        "summary": "Updates an enum version object",
        "description": "Use this API to update an enum version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEnumVersionForEnum",
        "parameters": [
          {
            "name": "enumId",
            "in": "path",
            "description": "The ID of the parent enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The enum version object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnumVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/TopicAddressEnumVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/applicationRegistrations/{id}": {},
    "/api/v2/architecture/events/{eventId}/versions/{id}": {
      "get": {
        "tags": ["Events"],
        "summary": "Retrieves an event version object",
        "description": "Use this API to retrieve a single event version by its ID.",
        "operationId": "getEventVersionForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the parent event.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Events"],
        "summary": "Deletes an event version object",
        "description": "Use this API to delete an event version.",
        "operationId": "deleteEventVersionForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the parent event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Events"],
        "summary": "Updates an event version object",
        "description": "Use this API to update an event version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventVersionForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the parent event object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event version object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/EventVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventApis/{eventApiId}/versions": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves a list of event API versions",
        "description": "Use this API to retrieve a list of event API versions under a particular event API matching the given parameters.",
        "operationId": "getEventApiVersionsForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Match event API versions with the given display name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match event API versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Match event API versions with the given version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "in": "query",
            "description": "Match event API versions with the given state ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of event API versions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Event APIs"],
        "summary": "Creates an event API version",
        "description": "Use this API to create an event API version.",
        "operationId": "createEventApiVersionForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event API version",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event API version. Returns the newly saved event API version in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/customAttributeDefinitions/{id}": {
      "get": {
        "tags": ["Custom Attribute Definitions"],
        "summary": "Retrieves a custom attribute definition object",
        "description": "Use this API to retrieve a single custom attribute by its ID.",
        "operationId": "getCustomAttributeDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the custom attribute object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The custom attribute definition object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Custom Attribute Definitions"],
        "summary": "Deletes a custom attribute definition object",
        "description": "Use this API to delete a custom attribute definition.",
        "operationId": "deleteCustomAttributeDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the custom attribute definition",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Custom Attribute Definitions"],
        "summary": "Updates a custom attribute definition object",
        "description": "Use this API to update a custom attribute definition. You can only update the associated entity types.",
        "operationId": "updateCustomAttributeDefinition",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the custom attribute object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The custom attribute definition object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustomAttributeDefinition"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The updated custom attribute definition object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeDefinitionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationVersions/{versionId}": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves an application version object",
        "description": "Use this API to retrieve a single application version by its ID.",
        "operationId": "getApplicationVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the application version object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Applications"],
        "summary": "Deletes an application version object",
        "description": "Use this API to delete an application version.",
        "operationId": "deleteApplicationVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the application version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Applications"],
        "summary": "Updates an application version object",
        "description": "Use this API to update an application version. You only need to specify the fields that need to be updated.",
        "operationId": "updateApplicationVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the application version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "relationsBrokerType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application version object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationDomains/export/{ids}": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "(Beta) Exports application domains and their entities",
        "description": "Use this API to export application domains and their nested entities. Please note that this endpoint is in beta and could be subject to change in the future",
        "operationId": "exportApplicationDomains",
        "parameters": [
          {
            "name": "ids",
            "in": "path",
            "description": "The IDs of the application domains to export ",
            "required": true,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Export file containing the application domains and accompanying entities",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDomainExportDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemas/{schemaId}/versions/{id}": {
      "get": {
        "tags": ["Schemas"],
        "summary": "Retrieves a schema version object",
        "description": "Use this API to retrieve a single schema by its ID.",
        "operationId": "getSchemaVersionForSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The schema version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Schemas"],
        "summary": "Deletes a schema version object",
        "description": "Use this API to delete a schema version.",
        "operationId": "deleteSchemaVersionForSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Schemas"],
        "summary": "Updates a schema version object",
        "description": "Use this API to update a schema version.",
        "operationId": "updateSchemaVersionForSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/SchemaVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The schema version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventApiProductRegistrations/{id}": {},
    "/api/v2/architecture/applicationDomains/import/{jobId}": {
      "get": {
        "tags": ["Application Domains"],
        "summary": "(Beta) Get import job to see its status and results",
        "operationId": "getImportJob",
        "parameters": [
          {
            "name": "jobId",
            "in": "path",
            "description": "The ID of the application domain import job ",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Job status with results populated once complete",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseJobDTO"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiVersions/{versionId}/state": {
      "patch": {
        "tags": ["Event APIs"],
        "summary": "Updates the state of an event API version by event API version ID",
        "description": "Use this API to update the state of an event API version. You only need to specify the state ID field with the desired state ID.",
        "operationId": "updateEventApiVersionState",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Event API version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateChangeRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/enums/{enumId}/versions/{id}/state": {
      "patch": {
        "tags": ["Enums"],
        "summary": "Updates the state of an enum version object",
        "description": "Use this API to update the state of an enum version. You only need to specify the target stateId field.",
        "operationId": "updateEnumVersionStateForEnum",
        "parameters": [
          {
            "name": "enumId",
            "in": "path",
            "description": "The ID of the parent enum object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the enum version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The enum version object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TopicAddressEnumVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the enum version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventApiProductVersions/{versionId}": {
      "get": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Retrieves an event API product version",
        "description": "Use this API to retrieve a single event API product version by its ID.",
        "operationId": "getEventApiProductVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API product version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "A list of additional entities to include in the response.",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "parent"
          }
        ],
        "responses": {
          "200": {
            "description": "The event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Deletes an event API product version by ID",
        "description": "Use this API to delete an event API product version by ID.",
        "operationId": "deleteEventApiProductVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API product version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Updates an event API product version by version ID",
        "description": "Use this API to update an event API product version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventApiProductVersion",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API product version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API product version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProductVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServiceScans/{scanId}/logs": {
      "get": {
        "tags": ["Messaging Service Scan Logs"],
        "summary": "(Beta) Retrieves a list of messaging service scan logs",
        "description": "Use this API to retrieve a list of messaging service scan logs that match the given parameters.",
        "operationId": "getMessagingServiceScansLogs",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "The ID of the messaging service scan we want logs for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging service scan logs to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging service scan logs and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanLogListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/events/{eventId}/versions/{id}/state": {
      "patch": {
        "tags": ["Events"],
        "summary": "Updates the state of an event version object",
        "description": "Use this API to update the state of event version. You only need to specify the target stateId field",
        "operationId": "updateEventVersionStateForEvent",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "The ID of the parent event object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event version object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/EventVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the event version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventApis/{eventApiId}/versions/{id}": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves an event API version",
        "description": "Use this API to retrieve a single event API version using the parent ID and the version's ID.",
        "operationId": "getEventApiVersionForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Event APIs"],
        "summary": "Deletes an event API version",
        "description": "Use this API to delete an event API version.",
        "operationId": "deleteEventApiVersionForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Event APIs"],
        "summary": "Updates an event API",
        "description": "Use this API to update an event API version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventApiVersionForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API version to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/applications/{applicationId}/versions": {
      "get": {
        "tags": ["Applications"],
        "summary": "Gets application version objects",
        "description": "Use this API to retrieve a list of application versions that match the given parameters.",
        "operationId": "getApplicationVersionsForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Match application versions with the given display name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match application versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Match application version objects with the given version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of application versions.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Applications"],
        "summary": "Creates an application version object",
        "description": "Creates an application version object",
        "operationId": "createApplicationVersionForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "App version request body description",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an application version. Returns the newly saved application version object in the response body.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/applicationVersions/{versionId}/state": {
      "patch": {
        "tags": ["Applications"],
        "summary": "Updates the state of an application version object",
        "description": "Use this API to update the state of an application version. You only need to specify the target stateId field.",
        "operationId": "updateApplicationVersionState",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the application version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The state change object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/StateChangeRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/schemas/{schemaId}/versions/{id}/state": {
      "patch": {
        "tags": ["Schemas"],
        "summary": "Updates the state of a schema version object",
        "description": "Use this API to update the state of a schema version.",
        "operationId": "updateSchemaVersionStateForSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The ID of the schema object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the schema version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The state change object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the schema version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/messagingServices/{id}/removeAssociation": {
      "put": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Removes a messaging service's association to the requested entity.",
        "description": "Use this API to remove the association between a messaging service and either of EVENT_MESH or EVENT_MANAGEMENT_AGENT.",
        "operationId": "removeAssociationMessagingService",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The association object with the value matching either EVENT_MESH or EVENT_MANAGEMENT_AGENT.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingServiceRemoveAssociation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated messaging service object, e.g. if the API request body had $&#123;\"association\": \"EVENT_MESH\"&#125; then the resulting object would not have eventMeshId attribute.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProductVersions/{versionId}/state": {
      "patch": {
        "tags": ["Event API Products"],
        "summary": "Updates the state of an event API product version by ID",
        "description": "Use this API to update the state of an event API product version. You only need to specify the state ID field with the desired state ID.",
        "operationId": "updateEventApiProductVersionState",
        "parameters": [
          {
            "name": "versionId",
            "in": "path",
            "description": "The ID of the event API product version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API product version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProductVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StateChangeRequestResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApis/{eventApiId}/versions/{id}/state": {
      "patch": {
        "tags": ["Event APIs"],
        "summary": "Updates the state of an event API version",
        "description": "Use this API to update the state of an event API version. You only need to specify the state ID field with the desired state ID.",
        "operationId": "updateEventApiVersionStateForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API version to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The Event API version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/applications/{applicationId}/versions/{id}": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves an application version object",
        "description": "Use this API to retrieve a single application version by its ID.",
        "operationId": "getApplicationVersionForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Applications"],
        "summary": "Deletes an application version object",
        "description": "Use this API to delete an application version.",
        "operationId": "deleteApplicationVersionForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Applications"],
        "summary": "Updates an application version object",
        "description": "Use this API to update an application version. You only need to specify the fields that need to be updated.",
        "operationId": "updateApplicationVersionForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application version object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventManagementAgents/{id}/configuration/raw": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Retrieves the raw configs in string format for an EMA object",
        "description": "Use this API to retrieve the raw configs for a single EMA by its ID.",
        "operationId": "getEventManagementAgentConfigRaw",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The EMA config in yaml structure.",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProducts/{eventApiProductId}/versions": {
      "get": {
        "tags": ["Event API Products"],
        "summary": "Retrieves a list of event API product versions",
        "description": "Use this API to retrieve a list of event API product versions under a particular event API product matching the given parameters.",
        "operationId": "getEventApiProductVersionsForEventApiProduct",
        "parameters": [
          {
            "name": "eventApiProductId",
            "in": "path",
            "description": "The ID of the parent event API product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "displayName",
            "in": "query",
            "description": "Match event API product versions with the given display name.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the event API product version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "Match event API product versions with the given IDs separated by commas.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "Match event API product versions with the given version.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "stateId",
            "in": "query",
            "description": "Match event API product versions with the given state ID.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "customAttributes",
            "in": "query",
            "description": "Returns the entities that match the custom attribute filter.<br>To filter by custom attribute name and value, use the format: `customAttributes=<custom-attribute-name>==<custom-attribute-value>`. <br>To filter by custom attribute name, use the format: `customAttributes=<custom-attribute-name>`. <br>The filter supports the `AND` operator for multiple custom attribute definitions (not multiple values for a given definition). Use `;` (`semicolon`) to separate multiple queries with `AND` operation. <br>Note: the filter only supports custom attribute values containing characters in `[a-zA-Z0-9_\\-\\. ]`.",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "searching by single custom attribute definition: `color==red`. <br>Searching by single custom attribute name: `color`. <br>Searching by multiple custom attribute definition: `color==red;security==high`. <br>Searching by  multiple custom attribute name: `color;security`. <br>Searching by  multiple custom attribute name `AND` custom attribute definition: `color;security==high`"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve a list of event API product versions.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": ["Event API Products"],
        "summary": "Creates an event API product version",
        "description": "Use this API to create an event API product version.",
        "operationId": "createEventApiProductVersionForEventApiProduct",
        "parameters": [
          {
            "name": "eventApiProductId",
            "in": "path",
            "description": "The ID of the parent event API product",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event API product version",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProductVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created an event API product version. Returns the newly saved event API product version in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection": {
      "get": {
        "tags": ["Messaging Service Scan Data"],
        "summary": "(Beta) Retrieves a list of messaging service scan data",
        "description": "Use this API to retrieve a list of messaging service scan data that match the given parameters.",
        "operationId": "getMessagingServiceScansData",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "The ID of the messaging service scan we want data for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of messaging service scan data to get per page.",
            "required": false,
            "schema": {
              "maximum": 100,
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number to get.",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The name of the field to sort on.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ids",
            "in": "query",
            "description": "The IDs of the messaging service scan data.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "collectionTypes",
            "in": "query",
            "description": "Match only scan data whose dataCollectionType matches the given list.",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The list of messaging service scan data and the accompanying metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanDataListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventManagementAgents/{id}/configuration/file": {
      "get": {
        "tags": ["Event Management Agents"],
        "summary": "(Beta) Retrieves the raw configs in file format for an EMA object",
        "description": "Use this API to retrieve the raw configs for a single EMA by its ID.",
        "operationId": "getEventManagementAgentConfigFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the EMA object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The EMA config in a yaml file named application.yml.",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApis/{eventApiId}/versions/{id}/asyncApi": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves the AsyncAPI specification for an event API version",
        "description": "Use this API to retrieve the AsyncAPI specification for an event API version using the parent ID and the version's ID.",
        "operationId": "getEventApiVersionAsyncApiForEventApi",
        "parameters": [
          {
            "name": "eventApiId",
            "in": "path",
            "description": "The ID of the parent event API.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showVersioning",
            "in": "query",
            "description": "Include versions in each AsyncAPI object's name when only one version is present",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includedExtensions",
            "in": "query",
            "description": "The event portal database keys to include for each AsyncAPI object.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format in which to retrieve the AsyncAPI specification. Possible values are yaml and json.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "yaml"],
              "default": "json"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of AsyncAPI to use",
            "required": false,
            "schema": {
              "type": "string",
              "default": "2.0.0"
            }
          },
          {
            "name": "eventApiProductVersionId",
            "in": "query",
            "description": "The ID of the event API Product Version to use for generating bindings.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "query",
            "description": "The ID of the plan to use for generating bindings.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gatewayMessagingServiceIds",
            "in": "query",
            "description": "The list IDs of gateway messaging services for generating bindings.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsyncAPI specification for the event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiVersions/{eventApiVersionId}/asyncApi": {
      "get": {
        "tags": ["Event APIs"],
        "summary": "Retrieves the AsyncAPI specification for an event API version",
        "description": "Use this API to retrieve the AsyncAPI specification for an event API version.",
        "operationId": "getAsyncApiForEventApiVersion",
        "parameters": [
          {
            "name": "eventApiVersionId",
            "in": "path",
            "description": "The ID of the event API version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showVersioning",
            "in": "query",
            "description": "Include versions in each AsyncAPI object's name when only one version is present",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format in which to retrieve the AsyncAPI specification. Possible values are yaml and json.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "yaml"],
              "default": "json"
            }
          },
          {
            "name": "includedExtensions",
            "in": "query",
            "description": "The event portal database keys to include for each AsyncAPI object.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "version",
            "in": "query",
            "description": "The version of AsyncAPI to use.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "2.0.0"
            }
          },
          {
            "name": "asyncApiVersion",
            "in": "query",
            "description": "The version of AsyncAPI to use.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "eventApiProductVersionId",
            "in": "query",
            "description": "The ID of the event API Product Version to use for generating bindings.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "planId",
            "in": "query",
            "description": "The ID of the plan to use for generating bindings.",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "gatewayMessagingServiceIds",
            "in": "query",
            "description": "The list IDs of gateway messaging services for generating bindings.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsyncAPI specification for the event API version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/messagingServices/{messagingServiceId}/scanStart": {
      "put": {
        "tags": ["Messaging Services"],
        "summary": "(Beta) Requests a scan to run against a messaging service",
        "description": "Use this API to make a scan request on a messaging service object.",
        "operationId": "scanStartMessagingService",
        "parameters": [
          {
            "name": "messagingServiceId",
            "in": "path",
            "description": "The ID of the messaging service object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The messaging service object.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MessagingServiceOperation"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Requested a scan on the messaging service. The operation object with ID set as ID of the created scan Object is returned in the response body.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceOperationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applications/{applicationId}/versions/{id}/state": {
      "patch": {
        "tags": ["Applications"],
        "summary": "Updates the state of an application version object",
        "description": "Use this API to update the state of an application version. You only need to specify the target stateId field.",
        "operationId": "updateApplicationVersionStateForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application version object to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The application version object.",
          "content": {
            "application/json;charset=UTF-8": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the application version object.",
            "content": {
              "application/json;charset=UTF-8": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventApiProductMemAssociations/{memAssociationId}": {
      "delete": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Disassociates a gateway messaging service from an event API product version by association ID",
        "description": "Use this API to disassociate an event API product version and gateway messaging service by association ID.",
        "operationId": "disassociateGatewayMessagingServiceFromEventApiProductVersionById",
        "parameters": [
          {
            "name": "memAssociationId",
            "in": "path",
            "description": "The association ID to perform the disassociation for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProducts/{eventApiProductId}/versions/{id}": {
      "get": {
        "tags": ["Event API Products"],
        "summary": "Retrieves an event API product version",
        "description": "Use this API to retrieve a single event API product version using the parent ID and the version's ID.",
        "operationId": "getEventApiProductVersionForEventApiProduct",
        "parameters": [
          {
            "name": "eventApiProductId",
            "in": "path",
            "description": "The ID of the parent event API product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "delete": {
        "tags": ["Event API Products"],
        "summary": "Deletes an event API product version",
        "description": "Use this API to delete an event API product version.",
        "operationId": "deleteEventApiProductVersionForEventApiProduct",
        "parameters": [
          {
            "name": "eventApiProductId",
            "in": "path",
            "description": "The ID of the parent event API product",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product version",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "patch": {
        "tags": ["Event API Products"],
        "summary": "Updates an event API product version",
        "description": "Use this API to update an event API product version. You only need to specify the fields that need to be updated.",
        "operationId": "updateEventApiProductVersionForEventApiProduct",
        "parameters": [
          {
            "name": "eventApiProductId",
            "in": "path",
            "description": "The ID of the parent event API product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product version to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API product version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProductVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventApiProductVersionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/messagingServiceScans/{scanId}/dataCollection/{id}": {
      "get": {
        "tags": ["Messaging Service Scan Data"],
        "summary": "(Beta) Retrieves a messaging service scan data object",
        "description": "Use this API to retrieve a single messaging service scan data by its ID.",
        "operationId": "getMessagingServiceScanData",
        "parameters": [
          {
            "name": "scanId",
            "in": "path",
            "description": "The ID of the messaging service scan object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the messaging service scan data object.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The messaging service scan data object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessagingServiceScanDataResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applications/{applicationId}/versions/{id}/asyncApi": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves the AsyncAPI specification for an application version",
        "description": "Use this API to retrieve the AsyncAPI specification for an application version using the parent ID and the version's ID.",
        "operationId": "getApplicationVersionAsyncApiForApplication",
        "parameters": [
          {
            "name": "applicationId",
            "in": "path",
            "description": "The ID of the parent application.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the application version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "showVersioning",
            "in": "query",
            "description": "Include versions in each AsyncAPI object's name when only one version is present",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includedExtensions",
            "in": "query",
            "description": "The event portal database keys to include for each AsyncAPI object.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "asyncApiVersion",
            "in": "query",
            "description": "The version of AsyncAPI to use",
            "required": false,
            "schema": {
              "type": "string",
              "default": "2.0.0"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format in which to retrieve the AsyncAPI specification. Possible values are yaml and json.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "yaml"],
              "default": "json"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsyncAPI specification for the application version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/applicationVersions/{applicationVersionId}/asyncApi": {
      "get": {
        "tags": ["Applications"],
        "summary": "Retrieves the AsyncAPI specification for an application version",
        "description": "Use this API to retrieve the AsyncAPI specification for an application version.",
        "operationId": "getAsyncApiForApplicationVersion",
        "parameters": [
          {
            "name": "applicationVersionId",
            "in": "path",
            "description": "The ID of the application version.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "format",
            "in": "query",
            "description": "The format in which to retrieve the AsyncAPI specification. Possible values are yaml and json.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["json", "yaml"],
              "default": "json"
            }
          },
          {
            "name": "showVersioning",
            "in": "query",
            "description": "Include versions in each AsyncAPI object's name when only one version is present",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "includedExtensions",
            "in": "query",
            "description": "The event portal database keys to include for each AsyncAPI object.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "all"
            }
          },
          {
            "name": "asyncApiVersion",
            "in": "query",
            "description": "The version of AsyncAPI to use.",
            "required": false,
            "schema": {
              "type": "string",
              "default": "2.0.0"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The AsyncAPI specification for the application version.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              },
              "text/plain": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProducts/{eventApiProductId}/versions/{id}/state": {
      "patch": {
        "tags": ["Event API Products"],
        "summary": "Updates the state of an event API product version",
        "description": "Use this API to update the state of an event API product version. You only need to specify the state ID field with the desired state ID.",
        "operationId": "updateEventApiProductVersionStateForEventApiProduct",
        "parameters": [
          {
            "name": "eventApiProductId",
            "in": "path",
            "description": "The ID of the parent event API product.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the event API product version to update.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "The event API product version.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EventApiProductVersion"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The updated state of the event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/architecture/eventApiProductVersions/{eventApiProductVersionId}/memAssociations": {
      "post": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Associate gateway messaging service to event API product version",
        "description": "Use this API to associate an event API product version and gateway messaging service.",
        "operationId": "associateGatewayMessagingServiceToEAPVersion",
        "parameters": [
          {
            "name": "eventApiProductVersionId",
            "in": "path",
            "description": "The ID of the event API product version to associate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Gateway messaging service Id and supported Protocols",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayMessagingService"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Associated GatewayMessagingService to event API product version.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GatewayMessagingServiceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/architecture/eventApiProductVersions/{eventApiProductVersionId}/memAssociations/{memAssociationId}": {
      "delete": {
        "tags": ["Event API Products"],
        "summary": "(Beta) Disassociate gateway messaging service from event API product version",
        "description": "Use this API to disassociate an event API product version and gateway messaging service.",
        "operationId": "disassociateGatewayMessagingServiceToEAPVersion",
        "parameters": [
          {
            "name": "eventApiProductVersionId",
            "in": "path",
            "description": "The ID of the event API product version to disassociate.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "memAssociationId",
            "in": "path",
            "description": "The MEM association ID to dissociate from.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No content is returned."
          },
          "400": {
            "description": "Bad Request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              },
              "*/*": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    },
                    {
                      "$ref": "#/components/schemas/InvalidStateReference"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "405": {
            "description": "Method Not Allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "501": {
            "description": "Not Implemented",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "504": {
            "description": "Gateway Timeout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Address": {
        "required": ["addressLevels"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "addressLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressLevel"
            }
          },
          "addressType": {
            "type": "string",
            "enum": ["topic"]
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "AddressLevel": {
        "required": ["addressLevelType", "name"],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "root"
          },
          "addressLevelType": {
            "type": "string",
            "enum": ["literal", "variable"]
          },
          "enumVersionId": {
            "type": "string"
          }
        }
      },
      "AddressSpace": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "123456"
          },
          "brokerType": {
            "type": "string",
            "example": "kafka"
          },
          "delimiter": {
            "type": "string",
            "example": "_"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "Application": {
        "required": [
          "applicationDomainId",
          "applicationType",
          "brokerType",
          "name"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "example": "My First Application"
          },
          "applicationType": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "standard"
          },
          "brokerType": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "solace",
            "enum": ["kafka", "solace"]
          },
          "applicationDomainId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApplicationDomain": {
        "required": ["name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "My First Application Domain"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Application Domain created by the Solace PubSub+ Cloud API documentation"
          },
          "uniqueTopicAddressEnforcementEnabled": {
            "type": "boolean",
            "description": "Forces all topic addresses within the application domain to be unique.",
            "example": true
          },
          "topicDomainEnforcementEnabled": {
            "type": "boolean",
            "description": "Forces all topic addresses within the application domain to be prefixed with one of the application domain’s configured topic domains.",
            "example": false
          },
          "stats": {
            "$ref": "#/components/schemas/ApplicationDomainStats"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApplicationDomainExportDTO": {
        "type": "object",
        "properties": {
          "formatVersion": {
            "type": "string"
          },
          "applicationDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationDomain"
            }
          },
          "topicDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicDomain"
            }
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "applicationVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationVersion"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "eventVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventVersion"
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            }
          },
          "schemaVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaVersion"
            }
          },
          "enums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnum"
            }
          },
          "enumVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnumVersion"
            }
          },
          "eventApis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApi"
            }
          },
          "eventApiVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiVersion"
            }
          },
          "eventApiProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProduct"
            }
          },
          "eventApiProductVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProductVersion"
            }
          },
          "addressSpaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressSpace"
            }
          }
        }
      },
      "ApplicationDomainImportDTO": {
        "type": "object",
        "properties": {
          "formatVersion": {
            "type": "string"
          },
          "applicationDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationDomain"
            }
          },
          "topicDomains": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicDomain"
            }
          },
          "applications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "applicationVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationVersion"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "eventVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventVersion"
            }
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            }
          },
          "schemaVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaVersion"
            }
          },
          "enums": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnum"
            }
          },
          "enumVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnumVersion"
            }
          },
          "eventApis": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApi"
            }
          },
          "eventApiVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiVersion"
            }
          },
          "eventApiProducts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProduct"
            }
          },
          "eventApiProductVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProductVersion"
            }
          },
          "addressSpaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressSpace"
            }
          }
        }
      },
      "ApplicationDomainResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApplicationDomain"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationDomainStats": {
        "type": "object",
        "properties": {
          "schemaCount": {
            "type": "integer",
            "format": "int32"
          },
          "eventCount": {
            "type": "integer",
            "format": "int32"
          },
          "applicationCount": {
            "type": "integer",
            "format": "int32"
          },
          "enumCount": {
            "type": "integer",
            "format": "int32"
          },
          "eventApiCount": {
            "type": "integer",
            "format": "int32"
          },
          "eventApiProductCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "readOnly": true
      },
      "ApplicationDomainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationDomain"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationRegistration": {
        "required": ["applicationDomainId", "name", "registrationId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "12345678"
          },
          "registrationId": {
            "type": "string",
            "example": "12345678"
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "example": "My First Application Registration"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "ApplicationRegistrationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventApiProductRegistration"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Application"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationVersion": {
        "required": ["applicationId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Application created by Solace PubSub+ Cloud documentation"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "declaredProducedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredConsumedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "stateId": {
            "type": "string",
            "readOnly": true,
            "example": "1"
          },
          "eventMeshIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumers": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Consumer"
            }
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ApplicationVersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ApplicationVersion"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationVersion"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ApplicationsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Application"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "AttractedEventVersionTuple": {
        "type": "object",
        "properties": {
          "eventVersionId": {
            "type": "string"
          },
          "eventMeshIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "readOnly": true
      },
      "AttractingApplicationVersionTuple": {
        "type": "object",
        "properties": {
          "applicationVersionId": {
            "type": "string"
          },
          "eventMeshIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "readOnly": true
      },
      "BaseMessagingServiceDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID value of the object",
            "readOnly": true,
            "example": "123456"
          },
          "messagingServiceId": {
            "type": "string",
            "description": "ID of the Event Portal messaging service",
            "readOnly": true,
            "example": "456789"
          },
          "supportedProtocols": {
            "type": "array",
            "description": "Values for allowed supported protocols",
            "items": {
              "type": "string",
              "description": "Values for allowed supported protocols"
            }
          },
          "environmentId": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "environmentName": {
            "type": "string",
            "readOnly": true,
            "example": "Production"
          },
          "eventMeshId": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2y"
          },
          "eventMeshName": {
            "type": "string",
            "readOnly": true,
            "example": "US East Mesh"
          },
          "type": {
            "type": "string",
            "description": "The type of payload"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "BasePolicyDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID value of the object",
            "readOnly": true,
            "example": "123456"
          },
          "type": {
            "type": "string",
            "description": "The type of this payload"
          }
        },
        "discriminator": {
          "propertyName": "type"
        }
      },
      "Consumer": {
        "required": ["applicationVersionId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "example": "My First Consumer"
          },
          "applicationVersionId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "brokerType": {
            "type": "string",
            "example": "solace"
          },
          "consumerType": {
            "type": "string",
            "example": "eventQueue"
          },
          "subscriptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscription"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "readOnly": true
      },
      "ConsumerResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Consumer"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ConsumersResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consumer"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "CustomAttribute": {
        "type": "object",
        "properties": {
          "customAttributeDefinitionId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "customAttributeDefinitionName": {
            "pattern": "a-zA-Z0-9_\\-\\.",
            "type": "string",
            "example": "color"
          },
          "value": {
            "type": "object",
            "description": "Valid Objects are Strings with characters: [a-zA-Z0-9_\\-\\. ]",
            "example": "red"
          }
        }
      },
      "CustomAttributeDefinition": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string"
          },
          "name": {
            "pattern": "[a-zA-Z0-9\\._-]+",
            "type": "string",
            "example": "colour"
          },
          "valueType": {
            "type": "string",
            "enum": ["STRING"]
          },
          "associatedEntityTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"event\",\"application\"]"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "CustomAttributeDefinitionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/CustomAttributeDefinition"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "CustomAttributeDefinitionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeDefinition"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "DeliveryDescriptor": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "brokerType": {
            "type": "string"
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "keySchemaVersionId": {
            "type": "string",
            "example": "shb3mlyec2g"
          },
          "keySchemaPrimitiveType": {
            "type": "string",
            "example": "BYTES",
            "enum": [
              "BOOLEAN",
              "BYTES",
              "DOUBLE",
              "FLOAT",
              "INT",
              "LONG",
              "NULL",
              "NUMBER",
              "STRING"
            ]
          },
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "Environment": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz123abc"
          },
          "name": {
            "maxLength": 50,
            "minLength": 1,
            "type": "string",
            "example": "Staging environment"
          },
          "description": {
            "maxLength": 10000,
            "minLength": 1,
            "type": "string",
            "example": "The description of my environment"
          },
          "revision": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfEventMeshes": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EnvironmentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Environment"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EnvironmentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Environment"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "An error occurred"
          },
          "errorId": {
            "type": "string",
            "example": "123e4567-e89b-12d3-a456-426655440000"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "example": "'object': { 'field': 'description' }"
            },
            "example": "'object': { 'field': 'description' }"
          },
          "validationDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "example": "'name': ['Not unique']",
              "items": {
                "type": "string",
                "example": "'name': ['Not unique']"
              }
            },
            "example": "'name': ['Not unique']"
          },
          "errorType": {
            "type": "string",
            "writeOnly": true
          }
        },
        "discriminator": {
          "propertyName": "errorType"
        }
      },
      "Event": {
        "required": ["applicationDomainId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "example": "My First Event"
          },
          "shared": {
            "type": "boolean",
            "example": false
          },
          "applicationDomainId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EventApi": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "description": "The name of the event api.",
            "example": "Apitest"
          },
          "shared": {
            "type": "boolean",
            "example": true
          },
          "applicationDomainId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "brokerType": {
            "type": "string",
            "description": "The type of the broker used for the event API",
            "enum": ["kafka", "solace"],
            "default": "solace"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of this payload, eventApi.",
            "readOnly": true
          }
        }
      },
      "EventApiProduct": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server",
            "readOnly": true,
            "example": "12345"
          },
          "name": {
            "maxLength": 60,
            "minLength": 1,
            "type": "string",
            "description": "The name of the event API product",
            "example": "EventApiProductTest"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "abcappdomainid"
          },
          "shared": {
            "type": "boolean",
            "example": true
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true,
            "example": 3
          },
          "brokerType": {
            "type": "string",
            "description": "The type of the broker used for the event API product",
            "enum": ["kafka", "solace"],
            "default": "solace"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true
          }
        }
      },
      "EventApiProductRegistration": {
        "required": [
          "applicationDomainId",
          "eventApiProductVersionId",
          "planId",
          "registrationId"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "12345678"
          },
          "registrationId": {
            "type": "string",
            "example": "12345678"
          },
          "eventApiProductVersionId": {
            "type": "string",
            "example": "12345678"
          },
          "planId": {
            "type": "string",
            "example": "12345678"
          },
          "state": {
            "type": "string",
            "enum": [
              "Pending Approval",
              "Rejected",
              "Revoked",
              "Approved",
              "Error",
              "Live"
            ]
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EventApiProductResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventApiProduct"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventApiProductVersion": {
        "required": ["eventApiProductId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventApiProductId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event API product created by Solace PubSub+ Cloud documentation"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "summary": {
            "type": "string",
            "example": "Summary string value of event API product version"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the event API product version"
          },
          "eventApiVersionIds": {
            "type": "array",
            "description": "List of IDs of associated event API versions",
            "items": {
              "type": "string",
              "description": "List of IDs of associated event API versions"
            }
          },
          "stateId": {
            "type": "string",
            "example": "1"
          },
          "plans": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Plan"
            }
          },
          "solaceMessagingServices": {
            "type": "array",
            "description": "Solace Messaging Services",
            "items": {
              "$ref": "#/components/schemas/SolaceMessagingService"
            }
          },
          "filters": {
            "type": "array",
            "description": "List of filters that contains eventVersionId name and variables",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "approvalType": {
            "type": "string",
            "description": "Approval type",
            "enum": ["automatic", "manual", "automatic", "manual"],
            "default": "automatic"
          },
          "type": {
            "type": "string",
            "description": "The type of payload",
            "readOnly": true
          }
        }
      },
      "EventApiProductVersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventApiProductVersion"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventApiProductVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProductVersion"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        }
      },
      "EventApiProductsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiProduct"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        }
      },
      "EventApiResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventApi"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventApiVersion": {
        "required": ["eventApiId"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventApiId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event Api created by Solace PubSub+ Cloud documentation"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the eventApi version"
          },
          "producedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumedEventVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredEventApiProductVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "stateId": {
            "type": "string",
            "example": "1"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EventApiVersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventApiVersion"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventApiVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApiVersion"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        }
      },
      "EventApisResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventApi"
            }
          },
          "meta": {
            "$ref": "#/components/schemas/meta"
          }
        }
      },
      "EventManagementAgent": {
        "required": ["eventManagementAgentRegionId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "sdagkjlh32x"
          },
          "name": {
            "type": "string",
            "description": "The name of the EMA.",
            "example": "primary event management agent"
          },
          "region": {
            "type": "string",
            "description": "The region in which the EMA belongs to, extracted from the EventManagementAgentRegion.",
            "readOnly": true,
            "example": "North America"
          },
          "clientUsername": {
            "type": "string",
            "description": "The SMF username for a customer's EMA to use to communicate to event-portal.",
            "readOnly": true,
            "example": "sadhkjl2325sak"
          },
          "clientPassword": {
            "type": "string",
            "description": "The SMF password for a customer's EMA to use to communicate to event-portal.",
            "readOnly": true,
            "example": "SomePassword"
          },
          "referencedByMessagingServiceIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "description": "The list of messagingServiceIds user provides in GET APIs to filter the results.",
              "readOnly": true,
              "example": "[\"1kjdsf32\",\"9875ksdf\"]"
            }
          },
          "orgId": {
            "type": "string",
            "description": "Used by admin APIs to get a list of EMAs against the given orgId",
            "readOnly": true,
            "example": "897xd32"
          },
          "status": {
            "type": "string",
            "description": "The connection status of EP to the actual EMA which this object represents.",
            "readOnly": true,
            "example": "Connected"
          },
          "eventManagementAgentRegionId": {
            "type": "string",
            "description": "The ID of the associated EventManagementAgentRegion.",
            "example": "sdfkjh3242ds"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "EventManagementAgentRegion": {
        "required": [
          "cloudProvider",
          "host",
          "msgVpn",
          "name",
          "region",
          "serviceId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "serviceId": {
            "type": "string",
            "description": "The id of the service from maas-core.",
            "example": "67890x23vh"
          },
          "name": {
            "type": "string",
            "description": "The name of the EventManagementAgentRegion.",
            "example": "primary region"
          },
          "cloudProvider": {
            "type": "string",
            "description": "The name of the cloud provider.",
            "example": "AWS"
          },
          "region": {
            "type": "string",
            "description": "The name of the region.",
            "example": "us-east"
          },
          "host": {
            "type": "string",
            "description": "The host name of the region.",
            "example": "mr-connection-sdtwexd.messaging.solace.cloud"
          },
          "msgVpn": {
            "type": "string",
            "description": "The name of the region's msgVpn.",
            "example": "fooivmr1"
          },
          "port": {
            "type": "integer",
            "description": "The SMF port number.",
            "format": "int32",
            "example": 55443
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "updatedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          }
        }
      },
      "EventManagementAgentRegionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventManagementAgentRegion"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventManagementAgentResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventManagementAgent"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventManagementAgentsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventManagementAgent"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventMesh": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "name": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The name of the event mesh.",
            "example": "Inventory"
          },
          "environmentId": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The environmentId of the Event Mesh",
            "example": "67890"
          },
          "description": {
            "maxLength": 10000,
            "minLength": 1,
            "type": "string",
            "description": "The description of the event mesh.",
            "example": "The Inventory Event Meshapplications."
          },
          "brokerType": {
            "type": "string",
            "description": "The type of the broker used in the event mesh.",
            "enum": ["kafka", "solace"]
          },
          "applicationVersionIds": {
            "type": "array",
            "description": "The list of application version ids using this event mesh. Can only be set with a PATCH, not a POST.",
            "items": {
              "type": "string",
              "description": "The list of application version ids using this event mesh. Can only be set with a PATCH, not a POST."
            }
          },
          "type": {
            "type": "string",
            "description": "The type of this payload, eventMesh.",
            "readOnly": true
          }
        }
      },
      "EventMeshResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventMesh"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventMeshesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventMesh"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Event"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventVersion": {
        "required": ["eventId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "eventId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Event version created by Solace PubSub+ Cloud documentation"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "declaredProducingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "declaredConsumingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "producingEventApiVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "consumingEventApiVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "attractingApplicationVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AttractingApplicationVersionTuple"
            }
          },
          "schemaVersionId": {
            "type": "string",
            "example": "shb3mlyec2g"
          },
          "schemaPrimitiveType": {
            "type": "string",
            "example": "BYTES",
            "enum": [
              "BOOLEAN",
              "BYTES",
              "DOUBLE",
              "FLOAT",
              "INT",
              "LONG",
              "NULL",
              "NUMBER",
              "STRING"
            ]
          },
          "deliveryDescriptor": {
            "$ref": "#/components/schemas/DeliveryDescriptor"
          },
          "stateId": {
            "type": "string",
            "readOnly": true,
            "example": "1"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "EventVersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/EventVersion"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventVersion"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "EventsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "eventVersionId": {
            "type": "string",
            "example": "123456"
          },
          "topicFilters": {
            "type": "array",
            "description": "List of variable that contains address node name and filters",
            "items": {
              "$ref": "#/components/schemas/TopicFilter"
            }
          }
        },
        "description": "List of filters that contains eventVersionId name and variables"
      },
      "GatewayMessagingService": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string"
          },
          "messagingServiceId": {
            "type": "string"
          },
          "eventApiProductVersionId": {
            "type": "string"
          },
          "supportedProtocols": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "SMFC",
                "SMF",
                "SMFS",
                "AMQP",
                "AMQPS",
                "MQTT",
                "MQTTS",
                "MQTTWS",
                "MQTTWSS",
                "REST",
                "RESTS"
              ]
            }
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GatewayMessagingServiceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/GatewayMessagingService"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "InvalidNonStateReference": {
        "type": "object",
        "properties": {
          "entityId": {
            "type": "string"
          },
          "entityType": {
            "type": "string"
          }
        }
      },
      "InvalidStateReference": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/ErrorResponse"
          },
          {
            "type": "object",
            "properties": {
              "targetStateId": {
                "type": "string"
              },
              "inboundInvalidNonStateReferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidNonStateReference"
                }
              },
              "inboundInvalidStateReferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidStateReference"
                }
              },
              "outboundInvalidStateReferences": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvalidStateReference"
                }
              },
              "errorType": {
                "type": "string"
              }
            }
          }
        ]
      },
      "JobDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": ["in_progress", "error", "validation_error", "success"]
          },
          "jobType": {
            "type": "string"
          },
          "error": {
            "type": "object"
          },
          "results": {
            "type": "object"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "MessagingService": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "asdkl234x"
          },
          "eventMeshId": {
            "type": "string",
            "description": "The eventMeshId associated to the messaging service.",
            "example": "67890x23vh"
          },
          "runtimeAgentId": {
            "type": "string",
            "description": "The runtimeAgentId associated to the messaging service.",
            "example": "vh1234y14"
          },
          "solaceCloudMessagingServiceId": {
            "type": "string",
            "description": "The solaceCloudMessagingServiceId associated to the messaging service.",
            "example": "abcd1234x"
          },
          "messagingServiceType": {
            "type": "string",
            "description": "The type of the messaging service.",
            "example": "solace"
          },
          "name": {
            "type": "string",
            "description": "The name of the messaging service.",
            "example": "first messagingService"
          },
          "messagingServiceConnections": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceConnection"
            }
          },
          "eventManagementAgentId": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceAuthentication": {
        "required": ["authenticationType", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "kjsfg32ds"
          },
          "messagingServiceConnectionId": {
            "type": "string",
            "description": "The ID of the connection object associated to the authentication object.",
            "readOnly": true,
            "example": "sdafgj23"
          },
          "name": {
            "type": "string",
            "description": "The name of the authentication object.",
            "example": "https auth details"
          },
          "authenticationType": {
            "type": "string",
            "description": "The type of the authentication object.",
            "example": "basicAuthentication"
          },
          "authenticationDetails": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A JSON map containing a map of extra details for the authentication.",
              "example": {
                "broker owner": "Solace PE team"
              }
            },
            "description": "A JSON map containing a map of extra details for the authentication.",
            "example": {
              "broker owner": "Solace PE team"
            }
          },
          "messagingServiceCredentials": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceCredentialsn"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceConnection": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "5432dfg3"
          },
          "messagingServiceId": {
            "type": "string",
            "description": "The messagingServiceId associated to the connection object.",
            "readOnly": true,
            "example": "sdkjhg21948"
          },
          "name": {
            "type": "string",
            "description": "The name of the connection object.",
            "example": "my https connection"
          },
          "url": {
            "type": "string",
            "description": "The url of the connection object.",
            "example": "https://abcd.messaging.solace.cloud:943"
          },
          "protocol": {
            "type": "string",
            "description": "The protocol of the connection object.",
            "example": "https"
          },
          "protocolVersion": {
            "type": "string",
            "description": "The protocolVersion of the connection object.",
            "example": "2.0"
          },
          "bindings": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A JSON map containing a map of connection-specific values. ",
              "example": {
                "msgVpn": "myVPN"
              }
            },
            "description": "A JSON map containing a map of connection-specific values. ",
            "example": {
              "msgVpn": "myVPN"
            }
          },
          "messagingServiceAuthentications": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceAuthentication"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceCredentialsn": {
        "required": ["credentials", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "lkjdsfgew2"
          },
          "messagingServiceAuthenticationId": {
            "type": "string",
            "description": "The ID of the authentication object associated to the credentials object.",
            "readOnly": true,
            "example": "sdafgj23"
          },
          "name": {
            "type": "string",
            "description": "The name of the credentials object.",
            "example": "basic auth credentials"
          },
          "credentials": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "A JSON map containing the credentials information.",
              "example": {
                "username": "User1",
                "password": "secretPass"
              }
            },
            "description": "A JSON map containing the credentials information.",
            "example": {
              "username": "User1",
              "password": "secretPass"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceOperation": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "kljhwe32"
          },
          "messagingServiceId": {
            "type": "string",
            "description": "The ID of the messaging service.",
            "example": "kjerv32ck"
          },
          "scanTypes": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of scanTypes to be scanned.",
              "example": "[\"KAFKA_BROKER_CONFIGURATION\",\"KAFKA_TOPIC_LISTING\"]",
              "enum": [
                "KAFKA_ALL",
                "KAFKA_BROKER_CONFIGURATION",
                "KAFKA_CLUSTER_CONFIGURATION",
                "KAFKA_CONSUMER_GROUPS",
                "KAFKA_CONSUMER_GROUPS_CONFIGURATION",
                "KAFKA_FEATURES",
                "KAFKA_PRODUCERS",
                "KAFKA_TOPIC_CONFIGURATION",
                "KAFKA_TOPIC_CONFIGURATION_FULL",
                "KAFKA_TOPIC_LISTING",
                "KAFKA_TOPIC_OVERRIDE_CONFIGURATION",
                "SOLACE_ALL",
                "SOLACE_QUEUE_CONFIG",
                "SOLACE_QUEUE_LISTING",
                "SOLACE_SUBSCRIPTION_CONFIG"
              ]
            }
          },
          "destinations": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The list of destinations for EMA to send results to.",
              "example": "[\"EVENT_PORTAL\",\"FILE_WRITER\"]",
              "enum": ["EVENT_PORTAL", "FILE_WRITER"]
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceOperationResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessagingServiceOperation"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServiceRemoveAssociation": {
        "type": "object",
        "properties": {
          "association": {
            "type": "string",
            "description": "The target association to be removed from the messaging service.",
            "example": "EVENT_MANAGEMENT_AGENT",
            "enum": ["RUNTIME_AGENT", "EVENT_MESH", "EVENT_MANAGEMENT_AGENT"]
          }
        }
      },
      "MessagingServiceResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessagingService"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServiceScan": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "status": {
            "type": "string",
            "description": "The status of the messaging service scan.",
            "readOnly": true,
            "example": "FAILED"
          },
          "statusDescription": {
            "type": "string",
            "description": "The description of the messaging service scan status.",
            "readOnly": true,
            "example": "Scan failed because some scanTypes failed to complete."
          },
          "messagingServiceId": {
            "type": "string",
            "description": "The messagingServiceId of the scan.",
            "readOnly": true,
            "example": "67890x23vh"
          },
          "messagingServiceName": {
            "type": "string",
            "description": "The messagingServiceName of the scan.",
            "readOnly": true,
            "example": "first solace messagingService"
          },
          "scanTypes": {
            "type": "string",
            "description": "The scanTypes that were requested for the scan.",
            "readOnly": true,
            "example": "KAFKA_ALL"
          },
          "destinations": {
            "type": "string",
            "description": "The destinations which EMA will send the scan results.",
            "readOnly": true,
            "example": "EVENT_PORTAL,FILE_WRITER"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceScanData": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "scanId": {
            "type": "string",
            "description": "The ID of the scan.",
            "readOnly": true,
            "example": "67890x23vh"
          },
          "dataCollectionType": {
            "type": "string",
            "description": "The type of dataCollection this object holds scan data for.",
            "readOnly": true,
            "example": "SOLACE_QUEUE"
          },
          "data": {
            "type": "string",
            "description": "The scan data in JSON format.",
            "readOnly": true,
            "example": "{\"name\":\"some solace queue name\"}"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceScanDataListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceScanData"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServiceScanDataResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessagingServiceScanData"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServiceScanLog": {
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "id": {
            "type": "string",
            "description": "Primary key set by the server.",
            "readOnly": true,
            "example": "12345"
          },
          "scanId": {
            "type": "string",
            "description": "The ID of the scan.",
            "readOnly": true,
            "example": "67890x23vh"
          },
          "log": {
            "type": "string",
            "description": "The log message.",
            "readOnly": true,
            "example": "The Scan Is Done."
          },
          "logLevel": {
            "type": "string",
            "description": "The level of the log message.",
            "readOnly": true,
            "example": "INFO"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "MessagingServiceScanLogListResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceScanLog"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServiceScanResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/MessagingServiceScan"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServiceScansResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingServiceScan"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "MessagingServicesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MessagingService"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "nextPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Plan": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID value of the object",
            "readOnly": true,
            "example": "123456"
          },
          "name": {
            "type": "string",
            "description": "Title of the object",
            "example": "Gold"
          },
          "solaceClassOfServicePolicy": {
            "$ref": "#/components/schemas/SolaceClassOfServicePolicy"
          },
          "type": {
            "type": "string",
            "description": "The type of this payload",
            "readOnly": true
          }
        }
      },
      "ResponseJobDTO": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/JobDTO"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SchemaObject": {
        "required": [
          "applicationDomainId",
          "contentType",
          "name",
          "schemaType"
        ],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "12345678"
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "example": "My First Schema"
          },
          "shared": {
            "type": "boolean",
            "example": false
          },
          "contentType": {
            "maxLength": 255,
            "type": "string",
            "example": "json"
          },
          "schemaType": {
            "maxLength": 255,
            "type": "string",
            "example": "jsonSchema"
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventVersionRefCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SchemaResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SchemaObject"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SchemaVersion": {
        "required": ["schemaId", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "schemaId": {
            "type": "string",
            "example": "12345678"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Schema created by Solace PubSub+ Cloud API documentation"
          },
          "version": {
            "pattern": "^\\d+\\.\\d+\\.\\d+$",
            "type": "string",
            "example": "1.0.0"
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "content": {
            "type": "string",
            "example": "{ \"$schema\": \"http://json-schema.org/draft-07/schema#\", \"$id\": \"http://example.com/root.json\",\"type\": \"object\", \"title\": \"An example schema\", \"required\": [ \"attribute\", ], \"properties\": { \"attribute\": { \"$id\": \"#/properties/attribute\", \"type\": \"string\", \"title\": \"An example of a string based attribute\", \"examples\": [ \"aValue\" ], \"pattern\": \"^(.*)$\" } }}"
          },
          "referencedByEventVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "stateId": {
            "type": "string",
            "readOnly": true,
            "example": "1"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "SchemaVersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/SchemaVersion"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SchemaVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaVersion"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SchemasResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaObject"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "SolaceClassOfServicePolicy": {
        "type": "object",
        "description": "Solace class of service policy",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePolicyDTO"
          },
          {
            "type": "object",
            "properties": {
              "messageDeliveryMode": {
                "type": "string",
                "description": "The type of message delivery mode in the current event API product version",
                "enum": ["direct", "guaranteed", "direct", "guaranteed"],
                "default": "direct"
              },
              "accessType": {
                "type": "string",
                "enum": ["exclusive", "non-exclusive"]
              },
              "maximumTimeToLive": {
                "type": "integer",
                "description": "Duration in seconds of how long a message can live in a queue",
                "format": "int32",
                "example": 1500
              },
              "queueType": {
                "type": "string",
                "description": "The type of queue to be used in the current event API product version",
                "enum": ["single", "combined", "single", "combined"],
                "default": "combined"
              },
              "maxMsgSpoolUsage": {
                "type": "integer",
                "description": "Total number of MBs available for the queue to use",
                "format": "int32",
                "example": 5
              }
            }
          }
        ]
      },
      "SolaceMessagingService": {
        "type": "object",
        "description": "Solace Messaging Services",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseMessagingServiceDTO"
          },
          {
            "type": "object",
            "properties": {
              "solaceCloudMessagingServiceId": {
                "type": "string",
                "example": "service123"
              }
            }
          }
        ]
      },
      "StateChangeRequestResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/VersionedObjectStateChangeRequest"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "StateDTO": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "stateOrder": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "StatesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StateDTO"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "Subscription": {
        "type": "object",
        "properties": {
          "subscriptionType": {
            "type": "string",
            "example": "topic"
          },
          "value": {
            "type": "string",
            "example": "solace/cloud"
          },
          "attractedEventVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/AttractedEventVersionTuple"
            }
          }
        }
      },
      "TopicAddressEnum": {
        "required": ["applicationDomainId", "name"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "12345678"
          },
          "name": {
            "maxLength": 60,
            "type": "string",
            "example": "My First Enum"
          },
          "shared": {
            "type": "boolean",
            "example": false
          },
          "numberOfVersions": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "eventVersionRefCount": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TopicAddressEnumResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TopicAddressEnum"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TopicAddressEnumValue": {
        "required": ["value"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "enumVersionId": {
            "type": "string",
            "example": "xyz23mwec2g"
          },
          "value": {
            "maxLength": 255,
            "type": "string",
            "example": "Ontario"
          },
          "label": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the value"
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TopicAddressEnumVersion": {
        "required": ["enumId", "values", "version"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "xyz23mwec2g"
          },
          "enumId": {
            "type": "string",
            "example": "xyz23mwec2g"
          },
          "description": {
            "maxLength": 10000,
            "type": "string",
            "example": "Enum created by Solace PubSub+ Cloud API documentation"
          },
          "version": {
            "type": "string",
            "example": "1.0.0"
          },
          "displayName": {
            "maxLength": 40,
            "type": "string",
            "example": "Display name for the version"
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnumValue"
            }
          },
          "referencedByEventVersionIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "referencedByTopicDomainIds": {
            "type": "array",
            "readOnly": true,
            "items": {
              "type": "string",
              "readOnly": true,
              "example": "[\"5h2km5khkj\",\"h5mk26hkm2\"]"
            }
          },
          "stateId": {
            "type": "string",
            "readOnly": true,
            "example": "1"
          },
          "customAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttribute"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true
          }
        }
      },
      "TopicAddressEnumVersionResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TopicAddressEnumVersion"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TopicAddressEnumVersionsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnumVersion"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TopicAddressEnumsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicAddressEnum"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TopicDomain": {
        "required": ["addressLevels", "applicationDomainId", "brokerType"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "id": {
            "type": "string",
            "readOnly": true,
            "example": "vck3mzyb2j5"
          },
          "applicationDomainId": {
            "type": "string",
            "example": "acb2j5k3mly"
          },
          "brokerType": {
            "type": "string",
            "example": "solace"
          },
          "addressLevels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressLevel"
            }
          },
          "type": {
            "type": "string",
            "readOnly": true,
            "example": "topicDomain"
          }
        }
      },
      "TopicDomainResponse": {
        "type": "object",
        "properties": {
          "data": {
            "$ref": "#/components/schemas/TopicDomain"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TopicDomainsResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TopicDomain"
            }
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          }
        }
      },
      "TopicFilter": {
        "required": ["eventVersionIds"],
        "type": "object",
        "properties": {
          "createdTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "updatedTime": {
            "type": "string",
            "readOnly": true,
            "example": "2021-12-31T20:30:57.920Z"
          },
          "createdBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "changedBy": {
            "type": "string",
            "readOnly": true,
            "example": "12345678"
          },
          "name": {
            "type": "string",
            "description": "name of address node",
            "example": "name"
          },
          "filterValue": {
            "type": "string",
            "description": "Different filter values separated by comma",
            "example": " Tes?, TEST*FILTER, SAmPle"
          },
          "eventVersionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "type": {
            "type": "string"
          }
        },
        "description": "List of variable that contains address node name and filters"
      },
      "VersionedObjectStateChangeRequest": {
        "type": "object",
        "properties": {
          "stateId": {
            "type": "string",
            "example": "1"
          }
        }
      },
      "meta": {
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      }
    },
    "securitySchemes": {
      "APIToken": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
